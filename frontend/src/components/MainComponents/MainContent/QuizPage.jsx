import { useState, useEffect } from "react";
import userApi from "../../../api/userApi";

const QuizPage = ({ questionList, quizTitle, onBack }) => {
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [results, setResults] = useState(null);
  const [timeLeft, setTimeLeft] = useState(null);
  const [error, setError] = useState(null);

  // Fetch c√¢u h·ªèi t·ª´ API backend
  useEffect(() => {
    const fetchQuestions = async () => {
      setLoading(true);
      setError(null);

      try {
        // G·ªçi API backend ƒë·ªÉ l·∫•y danh s√°ch c√¢u h·ªèi
        const response = await userApi.getQuestionInList(questionList.id);
        const questionsData = response;
        // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ backend format sang frontend format
        const formattedQuestions = questionsData.map(q => ({
          id: q.questionId,
          question: q.question,
          options: q.options.map(opt => opt.content),
          // Kh√¥ng l∆∞u correctAnswer ·ªü frontend ƒë·ªÉ b·∫£o m·∫≠t
        }));

        setQuestions(formattedQuestions);
        setTimeLeft(questionList.duration * 60); // duration t·ª´ questionList
        setLoading(false);
      } catch (err) {
        setError(err.message || "Kh√¥ng th·ªÉ t·∫£i c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i sau.");
        setLoading(false);
        console.error('Error fetching questions:', err);
      }
    };

    fetchQuestions();
  }, [questionList.id]);

  // ƒê·∫øm ng∆∞·ª£c th·ªùi gian
  useEffect(() => {
    if (timeLeft > 0 && !showResults) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && !showResults) {
      handleSubmit();
    }
  }, [timeLeft, showResults]);

  // X·ª≠ l√Ω ch·ªçn ƒë√°p √°n
  const handleAnswerSelect = (questionId, optionIndex) => {
    if (showResults) return;

    setAnswers(prev => ({
      ...prev,
      [questionId]: optionIndex
    }));
  };

  // N·ªôp b√†i v√† l·∫•y k·∫øt qu·∫£ t·ª´ server
  const handleSubmit = async () => {
    setSubmitting(true);

    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server
      const submissionData = {
        questionListId: questionList.id,
        answers: Object.entries(answers).map(([questionId, selectedOption]) => ({
          questionId: parseInt(questionId),
          selectedOption: selectedOption
        }))
      };

      // G·ªçi API ƒë·ªÉ n·ªôp b√†i v√† nh·∫≠n k·∫øt qu·∫£
      const response = await userApi.postSubmission(submissionData);

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ n·ªôp b√†i');
        }
        throw new Error('Kh√¥ng th·ªÉ n·ªôp b√†i');
      }

      const resultData = await response.json();

      // C·∫≠p nh·∫≠t k·∫øt qu·∫£ t·ª´ server - s·ª≠ d·ª•ng ƒë√∫ng field names t·ª´ backend
      setResults({
        score: resultData.correctCount,
        totalQuestions: resultData.totalQuestions,
        percentage: resultData.percentage,
        questionResults: resultData.questionResults.map(result => ({
          questionId: result.questionId,
          userAnswer: result.userAnswer,
          correctAnswer: result.correctAnswer,
          isCorrect: result.correct // Backend tr·∫£ v·ªÅ 'correct', kh√¥ng ph·∫£i 'isCorrect'
        }))
      });

      setShowResults(true);
      setSubmitting(false);
    } catch (error) {
      setError(error.message || "Kh√¥ng th·ªÉ n·ªôp b√†i. Vui l√≤ng th·ª≠ l·∫°i.");
      setSubmitting(false);
      console.error('Error submitting quiz:', error);
    }
  };

  // Format th·ªùi gian
  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  // L·∫•y m√†u cho ƒë√°p √°n - Logic c·∫£i thi·ªán
  const getOptionClass = (question, optionIndex) => {
    if (!showResults) {
      return answers[question.id] === optionIndex ? 'btn-primary' : 'btn-outline-secondary';
    }

    const result = results?.questionResults.find(r => r.questionId === question.id);
    const isCorrectAnswer = optionIndex === result?.correctAnswer;
    const isUserAnswer = result?.userAnswer === optionIndex;
    const userAnsweredCorrectly = result?.isCorrect;

    // ƒê√°p √°n ƒë√∫ng - t√¥ n·ªÅn xanh
    if (isCorrectAnswer) {
      return 'btn-success text-white';
    }

    // ƒê√°p √°n sai m√† user ch·ªçn -> t√¥ n·ªÅn ƒë·ªè
    if (isUserAnswer && !userAnsweredCorrectly) {
      return 'btn-danger text-white';
    }

    return 'btn-outline-secondary';
  };

  // Reset quiz ƒë·ªÉ l√†m l·∫°i
  const resetQuiz = async () => {
    setAnswers({});
    setShowResults(false);
    setResults(null);
    setTimeLeft(questionList.duration * 60);
    setError(null);
  };

  if (loading) {
    return (
      <div className="container-fluid py-4" style={{ fontFamily: '"Inter", sans-serif' }}>
        <div className="d-flex justify-content-center align-items-center" style={{ height: '400px' }}>
          <div className="spinner-border text-success" role="status">
            <span className="visually-hidden">ƒêang t·∫£i c√¢u h·ªèi...</span>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="container-fluid py-4" style={{ fontFamily: '"Inter", sans-serif' }}>
        <div className="text-center">
          <div className="alert alert-danger" role="alert" style={{ fontFamily: '"Inter", sans-serif' }}>
            {error}
          </div>
          <button className="btn btn-secondary" onClick={onBack} style={{ fontFamily: '"Inter", sans-serif' }}>
            ‚Üê Quay l·∫°i danh s√°ch b√†i t·∫≠p
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="container-fluid py-4" style={{ fontFamily: '"Inter", sans-serif' }}>
      {/* Header */}
      <div className="row mb-4">
        <div className="col">
          <button
            className="btn btn-outline-secondary mb-3"
            onClick={onBack}
            style={{ fontFamily: '"Inter", sans-serif' }}
          >
            ‚Üê Quay l·∫°i danh s√°ch b√†i t·∫≠p
          </button>
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <h2 className="fw-bold text-success mb-1" style={{ fontFamily: '"Inter", sans-serif' }}>
                ‚úèÔ∏è {quizTitle}
              </h2>
              <p className="text-muted" style={{ fontFamily: '"Inter", sans-serif' }}>
                {questions.length} c√¢u h·ªèi
              </p>
            </div>
            {!showResults && timeLeft !== null && (
              <div className="text-end">
                <div
                  className={`fw-bold fs-4 ${timeLeft < 300 ? 'text-danger' : 'text-warning'}`}
                  style={{ fontFamily: '"Inter", sans-serif' }}
                >
                  ‚è∞ {formatTime(timeLeft)}
                </div>
                <small className="text-muted" style={{ fontFamily: '"Inter", sans-serif' }}>Th·ªùi gian c√≤n l·∫°i</small>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* K·∫øt qu·∫£ */}
      {showResults && results && (
        <div className="row mb-4">
          <div className="col">
            <div className="card border-0 shadow-sm bg-light">
              <div className="card-body text-center">
                <h3 className="fw-bold text-success mb-3" style={{ fontFamily: '"Inter", sans-serif' }}>
                  üéâ Ho√†n th√†nh b√†i t·∫≠p!
                </h3>
                <div className="row">
                  <div className="col-md-4">
                    <div className="fs-2 fw-bold text-primary" style={{ fontFamily: '"Inter", sans-serif' }}>
                      {results.score}/{results.totalQuestions}
                    </div>
                    <div className="text-muted" style={{ fontFamily: '"Inter", sans-serif' }}>S·ªë c√¢u ƒë√∫ng</div>
                  </div>
                  <div className="col-md-4">
                    <div className="fs-2 fw-bold text-success" style={{ fontFamily: '"Inter", sans-serif' }}>
                      {results.percentage.toFixed(1)}%
                    </div>
                    <div className="text-muted" style={{ fontFamily: '"Inter", sans-serif' }}>T·ª∑ l·ªá ch√≠nh x√°c</div>
                  </div>
                  <div className="col-md-4">
                    <div 
                      className={`fs-2 fw-bold ${results.percentage >= 70 ? 'text-success' : results.percentage >= 50 ? 'text-warning' : 'text-danger'}`}
                      style={{ fontFamily: '"Inter", sans-serif' }}
                    >
                      {results.percentage >= 70 ? 'Gi·ªèi' : results.percentage >= 50 ? 'Kh√°' : 'C·∫ßn c·ªë g·∫Øng'}
                    </div>
                    <div className="text-muted" style={{ fontFamily: '"Inter", sans-serif' }}>ƒê√°nh gi√°</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* C√¢u h·ªèi */}
      <div className="row">
        <div className="col">
          {questions.map((question, index) => (
            <div key={question.id} className="card mb-4 border-0 shadow-sm">
              <div className="card-body">
                <div className="d-flex align-items-start mb-3">
                  <span
                    className="badge bg-secondary me-3 fs-6"
                    style={{ minWidth: '40px', fontFamily: '"Inter", sans-serif' }}
                  >
                    {index + 1}
                  </span>
                  <h5 className="mb-0 flex-grow-1" style={{ fontFamily: '"Inter", sans-serif' }}>
                    {question.question}
                  </h5>
                  {showResults && (
                    <span 
                      className={`badge ${results?.questionResults.find(r => r.questionId === question.id)?.isCorrect ? 'bg-success' : 'bg-danger'}`}
                      style={{ fontFamily: '"Inter", sans-serif' }}
                    >
                      {results?.questionResults.find(r => r.questionId === question.id)?.isCorrect ? '‚úì' : '‚úï'}
                    </span>
                  )}
                </div>

                <div className="row g-2">
                  {question.options.map((option, optionIndex) => (
                    <div key={optionIndex} className="col-md-6">
                      <button
                        className={`btn w-100 text-start ${getOptionClass(question, optionIndex)}`}
                        onClick={() => handleAnswerSelect(question.id, optionIndex)}
                        disabled={showResults}
                        style={{
                          fontFamily: '"Inter", sans-serif',
                          minHeight: '48px'
                        }}
                      >
                        <span className="me-2">{String.fromCharCode(65 + optionIndex)}.</span>
                        {option}
                      </button>
                    </div>
                  ))}
                </div>

                {showResults && (
                  <div className="mt-3 p-3 bg-light rounded">
                    {(() => {
                      const result = results?.questionResults.find(r => r.questionId === question.id);
                      const correctAnswer = result?.correctAnswer;
                      const userAnswer = result?.userAnswer;
                      const isCorrect = result?.isCorrect;
                      
                      return (
                        <div style={{ fontFamily: '"Inter", sans-serif' }}>
                          {isCorrect ? (
                            // Ch·ªâ hi·ªÉn th·ªã icon t√≠ch xanh khi tr·∫£ l·ªùi ƒë√∫ng
                            <div className="text-center">
                              <span className="text-success fs-4">‚úì</span>
                              <div className="text-success">Ch√≠nh x√°c</div>
                            </div>
                          ) : (
                            // Hi·ªÉn th·ªã ƒë√°p √°n ƒë√∫ng v√† sai khi tr·∫£ l·ªùi sai
                            <div className="row">
                              <div className="col-md-6">
                                <small className="text-muted">ƒê√°p √°n ƒë√∫ng:</small>
                                <div className="text-success">
                                  {String.fromCharCode(65 + correctAnswer)}. {question.options[correctAnswer]}
                                </div>
                              </div>
                              <div className="col-md-6">
                                <small className="text-muted">C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n:</small>
                                <div className="text-danger">
                                  {userAnswer !== undefined && userAnswer !== -1 
                                    ? `${String.fromCharCode(65 + userAnswer)}. ${question.options[userAnswer]}`
                                    : "Kh√¥ng tr·∫£ l·ªùi"
                                  }
                                </div>
                              </div>
                            </div>
                          )}
                        </div>
                      );
                    })()}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* N√∫t n·ªôp b√†i */}
      {!showResults && (
        <div className="row">
          <div className="col text-center">
            <button
              className="btn btn-success btn-lg px-5"
              onClick={handleSubmit}
              disabled={submitting || Object.keys(answers).length === 0}
              style={{ fontFamily: '"Inter", sans-serif' }}
            >
              {submitting ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  ƒêang n·ªôp b√†i...
                </>
              ) : (
                `üì§ N·ªôp b√†i (${Object.keys(answers).length}/${questions.length})`
              )}
            </button>
            <div className="mt-2">
              <small className="text-muted" style={{ fontFamily: '"Inter", sans-serif' }}>
                B·∫°n ƒë√£ tr·∫£ l·ªùi {Object.keys(answers).length}/{questions.length} c√¢u h·ªèi
              </small>
            </div>
          </div>
        </div>
      )}

      {/* N√∫t l√†m l·∫°i */}
      {showResults && (
        <div className="row">
          <div className="col text-center">
            <button
              className="btn btn-primary me-3"
              onClick={resetQuiz}
              style={{ fontFamily: '"Inter", sans-serif' }}
            >
              üîÑ L√†m l·∫°i
            </button>
            <button
              className="btn btn-outline-secondary"
              onClick={onBack}
              style={{ fontFamily: '"Inter", sans-serif' }}
            >
              üìö Ch·ªçn b√†i kh√°c
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default QuizPage;